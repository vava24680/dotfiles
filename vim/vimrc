" 1. Global Settings {{{1
" Set nocompatible mode
set nocompatible

" Set leader key
let mapleader=','

" Set script encoding to UTF-8.
scriptencoding utf-8

" Disable netrw function.
let g:loaded_netrw = 1
let g:loaded_netrwPlugin = 1

" Enable wildmenu if possible.
if has('wildmenu')
    set wildmenu
endif
" }}}

" 2. General Settings {{{1
" 2.1 Editing {{{2
" Enable showing confirmation message.
set confirm
" }}}

" 2.2 Encoding {{{2
" Set Vim internal encoding to UTF-8.
set encoding=utf-8

" Set encoding for showing contents on terminals to UTF-8.
set termencoding=utf-8
" }}}

" 2.3 Colors {{{2
" Enable 24-bit RGB color support.
" Referece: https://github.com/vim/vim/issues/3608
if &t_8f == ""
    set t_8f=[38;2;%lu;%lu;%lum
endif

if &t_8b == ""
    set t_8b=[48;2;%lu;%lu;%lum
endif

set termguicolors
" }}}

" 2.4 Display {{{2
" Enable syntax highlight.
syntax enable

" Show line number.
set number

" Show invisible characters including the following three:
" 1. Tab
" 2. Trailing space
" 3. Non-breakable space
set list

" Enable highlighting current line
set cursorline

" Set other visible characters for some invisible characters.
set listchars=eol:Â¬,tab:Â¤Â·,trail:Â·

" Change cursor shape to block.
set guicursor=a:block

" Set background to dark.
set background=dark
" }}}

" 2.5 Search {{{2
" Enable highlight search.
set hlsearch

" Ignore case in searching.
set ignorecase

" Enable increase searching
set incsearch

" Enable case-insensitive searching when search pattern are all lowercase,
" case-sensitive otherwise.
set smartcase

" Enable searching with regex.
set magic
" }}}

" 2.6 Status line {{{2
" Make status line always show.
set laststatus=2
" }}}

" 2.7 Windows, Tabs, Buffers {{{2
" Make the new vertically splited window put to the right of the current window.
set splitright

" Make the new horizontally splited window put under the current window.
set splitbelow

" Always show tab navigation bar.
set showtabline=2
" }}}

" 2.8 Indentation {{{2
" Copy the indentation of the current line to next inserted line.
set autoindent

" Do smart autoindenting when starting a new line.
set smartindent
" }}}

" 2.9 Files {{{2
" Auto reload the file when it is changed outside.
set autoread

" Enable filetype detection.
filetype on

" Enable filetype-specific indenting.
filetype indent on

" Enable filetype-specific plugins load.
filetype plugin on
" }}}

" 2.10 User interfaces {{{2
" Enable the use of mouse.
set mouse=a

" Keep 8 lines above (below) the cursor when scrolling up (down).
set scrolloff=8

" Enable breaking long lines to multiple lines.
set wrap

" Make vim break lines without breaking words.
set linebreak

" Make vim show some characters at where the lines are wrapped.
set showbreak=->
" }}}

" 2.11 Warnings {{{2
" Disable bell for error messages.
set noerrorbells

" Disable visual bells for error messages.
set novisualbell

" Disable visual bells.
set t_vb=
" }}}

" 2.12 Tabs {{{2
" In my tab and space configuratiob, I do not modify default tabstop configuration
" as recommended in manual.
" I will set expandtab, shiftwidth and softtabstop.

" Make vim insert appropriate number of spaces when <Tab> is inserted
" in insert mode.
set expandtab

" Make vim insert 2 space characters for each of (auto) indent operation like
" >>, << or cindent.
set shiftwidth=2

" Softtabstop controls how many tab characters and space characters
" that vim inserts when <Tab> is inserted in insert mode.
" As expandtab feature is on, it contronls how many space characters
" that vim inserts when <Tab> is inserted in insert mode.
" For current configuration, set to negative value means its value
" will be as same as the shiftwidth option, which means as same as
" the indentation configuration.
set softtabstop=-1

set smarttab
" }}}

" 2.13 Miscellaneous {{{2
" Keep 10000 lines of previous typed command.
set history=10000
" }}}
" }}}

" 3. Auto commands {{{1
function CustomHighlightsFunc() abort
    " Highlight current line.
    highlight Cursorline cterm=bold ctermbg=237 gui=bold guibg=#444444

    " Highlight line numbers.
    highlight LineNr ctermfg=LightGrey guifg=#B8B8B8

    " Highlight current line number.
    highlight CursorLineNr cterm=bold,italic ctermbg=White ctermfg=Blue
                           \ gui=bold,italic guibg=White guifg=Blue

    " Highlight eol, extends and precedes these thress invisible characters.
    highlight NonText cterm=bold ctermfg=244 gui=bold guifg=#3886B0

    " Link group 'SpecialKey' to group 'NonText'.
    highlight! link SpecialKey NonText
endfunction

augroup CustomHighlights
    autocmd!
    autocmd colorscheme * call CustomHighlightsFunc()
augroup END
" }}}

" 4. Keybindings {{{1
" 4.1 Window moving related bindings. {{{2
noremap <silent> <leader>h          :wincmd h<CR>
noremap <silent> <leader>j          :wincmd j<CR>
noremap <silent> <leader>k          :wincmd k<CR>
noremap <silent> <leader>l          :wincmd l<CR>
noremap <silent> <leader><Left>     :wincmd h<CR>
noremap <silent> <leader><Down>     :wincmd j<CR>
noremap <silent> <leader><Up>       :wincmd k<CR>
noremap <silent> <leader><Right>    :wincmd l<CR>
noremap <silent> <C-W><Left>        :wincmd h<CR>
noremap <silent> <C-W><Down>        :wincmd j<CR>
noremap <silent> <C-W><Up>          :wincmd k<CR>
noremap <silent> <C-W><Right>       :wincmd l<CR>
" }}}

" 4.2 Tab related bindings. {{{2
noremap <silent> tn :tabnext<CR>
noremap <silent> tp :tabprevious<CR>
noremap <silent> tN :tabnew<CR>
noremap <silent> tC :tabclose<CR>
noremap <silent> tf :tabfirst<CR>
noremap <silent> tl :tablast<CR>
" }}}

" 4.3 Window split related bindings. {{{2
noremap <silent> sh         :split<CR>
noremap <silent> sv         :vsplit<CR>
" }}}

" 4.4 Enable/Disable editing keymap bindings. {{{2
noremap <silent> <leader>ee :set modifiable&<CR>
noremap <silent> <leader>de :set nomodifiable<CR>
" }}}

" 4.5 Toggle showing relative line number keymap binding. {{{2
noremap <silent> <leader>rn   :setlocal relativenumber!<CR>
" }}}

" 4.6 Editing and reloading Vim configuration files keymap bindings. {{{2
nnoremap <leader>ev :tabedit $MYVIMRC<CR> :echo "After editing, press ',sv' to reload"<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
" }}}
" }}}

" 5. Plugins {{{1
" 5.1 Install vim-plug if it is not installed yet. {{{2
let s:unix = "unix"
let s:windows = "win32"

function HasVimPlugForVimOnUnixPlatform()
    return !empty(glob('~/.vim/autoload/plug.vim'))
endfunction

function HasVimPlugForVimOnWindowsPlatform()
  return !empty(glob('`echo "$HOME/vimfiles/autoload/plug.vim"`'))
endfunction

function InstallVimPlug()
    if and(has(s:unix), !HasVimPlugForVimOnUnixPlatform())
        silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
               \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    elseif and(has(s:windows), !HasVimPlugForVimOnWindowsPlatform())
        silent !iwr -useb
               \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim |`
               \ ni $HOME/vimfiles/autoload/plug.vim -Force
    endif
endfunction

call InstallVimPlug()
" }}}

call plug#begin()
" 5.2 Install UI related plugins. {{{2
Plug 'morhetz/gruvbox'

Plug 'itchyny/lightline.vim' " {{{3
function! DetermineEOL()
  return &endofline ? '' : '[noeol]'
endfunction

function ShowCurrentTag()
  " return tagbar#currenttag('%s', '', '', 'scoped-stl') . tagbar#currenttagtype('(%s)', '')
endfunction

let g:lightline = {
    \ 'colorscheme': 'one',
    \ 'active': {
    \   'left': [
    \     ['mode', 'paste'],
    \     ['gitinfo', 'readonly', 'filename', 'modified', 'eol']
    \   ],
    \   'right': [
    \     ['ColumnInfo'],
    \     ['LineNumberPart'],
    \     ['filetype', 'fileencoding', 'fileformat']
    \   ],
    \ },
    \ 'inactive': {
    \   'left': [
    \     ['mode', 'filename', 'modified']
    \   ],
    \   'right': [
    \     ['ColumnInfo'],
    \     ['LineNumberPart'],
    \     ['filetype', 'fileencoding', 'fileformat']
    \   ],
    \ },
    \ 'component': {
    \   'LineNumberPart': '%3p%% %l/%L',
    \   'ColumnInfo': 'Col: %-v',
    \ },
    \ 'component_function': {
    \   'gitinfo': 'FugitiveHead',
    \   'eol': 'DetermineEOL',
    \   'tag': 'ShowCurrentTag',
    \ },
\ }
" }}}
" }}}

" 5.3 Install utility plugins. {{{2
" Indent line plugin.
Plug 'Yggdroot/indentLine'
let g:indentLine_enabled        = 1
let g:indentLine_setColors      = 1
let g:indentLine_color_term     = 242
let g:indentLine_color_gui      = '#6c6c6c'
let g:indentLine_char_list      = ['|', 'Â¦']
let g:indentLine_bufTypeExclude = ['help']
" }}}

" 5.4 Install Git related plugins. {{{2
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
" }}}

" 5.5 Install search plugin. {{{2
Plug 'dyng/ctrlsf.vim'

let g:ctrlsf_auto_focus = {
    \ 'at': 'done'
    \ }

if has('patch-8.0.1039')
    let g:ctrlsf_search_mode = 'async'
else
    let g:ctrlsf_search_mode = 'sync'
endif

" Make search result quickfix window use 20% height of current vim window.
let g:ctrlsf_compact_winsize = '20%'

" Make search result present in quickfix window.
let g:ctrlsf_default_view_mode = 'compact'
" }}}

" 5.6 Install file explorer plugin. {{{3
Plug 'preservim/nerdtree'
noremap <silent> <F6>         :NERDTreeToggle<CR>
noremap <silent> <leader>ntf  :NERDTreeFind<CR>
noremap <silent> <leader>ntv  :NERDTreeToggleVCS<CR>:wincmd p<CR>:NERDTreeFind<CR>
noremap <silent> <leader>ntc  :NERDTreeClose<CR>

"""" Delete the buffer of the file which is just deleted with NERDTree.
let NERDTreeAutoDeleteBuffer  = 1

"""" Enable sorting bookmarks list in case-sensitive order
let NERDTreeBookmarksSort     = 2

"""" Enable case-sensitive filenames sorting in NERDTree explorer.
let NERDTreeCaseSensitiveSort = 1

"""" Make NERDTree filter out some temporary files.
let NERDTreeIgnore            = ['\.swp$', '\.pyc$', '__pycache__']

"""" Enable natural sorting order.
let NERDTreeNaturalSort       = 1

"""" Enable showing bookmarks.
let NERDTreeShowBookmarks     = 1

"""" Show hidden files by default.
let NERDTreeShowHidden        = 1

"""" Enable showing line numbers in NERDTree explorer.
let NERDTreeShowLineNumbers   = 1

"""" Set the NERDTree window size.
let NERDTreeWinSize           = 33
" }}}

" 5.7 Install tags explorer plugin. {{{2
if has('patch-8.0.27')
    Plug 'liuchengxu/vista.vim'

    " Disable icons rendering.
    let g:vista#renderer#enable_icon = 0

    " Use command line and floating window to show the content
    " of the current cursor points to.
    let g:vista_echo_cursor_strategy = 'both'

    let g:vista_sidebar_width = 40
else
    Plug 'majutsushi/tagbar'
endif
" }}}

" 5.8 Install utils plugins. {{{2
Plug 'ervandew/supertab'

Plug 'Raimondi/delimitMate'
let g:delimitMate_matchpairs = "(:),[:],{:}"

" TOML syntax plugin.
if !has('patch-8.2.3519')
    Plug 'cespare/vim-toml', {'branch': 'main'}
endif

" requirements.txt plugin.
if !has('patch-9.1.0326')
    Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'}
endif

" Markdown plugin.
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}

" Better space plugin.
Plug 'ntpeters/vim-better-whitespace'

" Disable auto stripping trailing spaces on file saving.
let g:strip_whitespace_on_save = 0
" }}}

" Old plugins. {{{2
" Plug 'guns/xterm-color-table.vim'
" if v:version < 800
"   Plug 'vim-syntastic/syntastic'
" else
"   Plug 'dense-analysis/ale'
"   let g:ale_sign_error = '!!'
"   let g:ale_sign_warning = '->'
"   let g:ale_echo_msg_format = '[%linter%] %code%: %s. %severity%'
"   let g:ale_echo_msg_error_str = '[E]'
"   let g:ale_echo_msg_info_str = '[I]'
"   let g:ale_echo_msg_warning_str = '[W]'
"   let g:ale_sign_highlight_linenrs = 1
"   highlight ALEErrorLine cterm=bold ctermfg=7 ctermbg=9
"   highlight ALEErrorSignLineNr cterm=bold ctermfg=7 ctermbg=160
"   highlight ALEWarningLine cterm=bold ctermfg=15 ctermbg=0
"   highlight ALEWarningSignLineNr cterm=bold ctermfg=4
"   highlight ALEWarningSign cterm=bold ctermfg=1
" endif

" Plug 'godlygeek/tabular'
" Plug 'rhysd/conflict-marker.vim'
" Plug 'wenlongche/SrcExpl'
" }}}
call plug#end()
" }}}

" 6. Change colorscheme {{{1
colorscheme gruvbox
" }}}
